using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class DyslexiaGameController : MonoBehaviour
{
    public Text wordDisplay;
    public Text resultDisplay;
    public Button[] syllableButtons;

    private List<WordData> wordsData;
    private List<WordData> remainingWords;
    private WordData currentWordData;
    private bool firstGuess;
    private float startTime;

    [System.Serializable]
    public class WordData
    {
        public string word;
        public string[] syllableOptions;
        public int correctSyllableIndex;
    }

    void Start()
    {
        // Manually defined words with missing syllables
        wordsData = new List<WordData>
        {
            new WordData { word = "миш__", syllableOptions = new string[] { "ка", "па", "ма" }, correctSyllableIndex = 0 },
            new WordData { word = "лам__", syllableOptions = new string[] { "па", "ка", "са" }, correctSyllableIndex = 0 },
            new WordData { word = "лег__", syllableOptions = new string[] { "ло", "лу", "зо" }, correctSyllableIndex = 0 },
            new WordData { word = "ябъл__", syllableOptions = new string[] { "ка", "къ", "ца" }, correctSyllableIndex = 0 },
            new WordData { word = "кот__", syllableOptions = new string[] { "ка", "па", "ла" }, correctSyllableIndex = 0 },
            new WordData { word = "ку__", syllableOptions = new string[] { "че", "це", "ме" }, correctSyllableIndex = 0 },
            // Add more words here
        };

        firstGuess = true;
        remainingWords = new List<WordData>(wordsData);
        resultDisplay.enabled = false; // Disable resultDisplay at the start
        DisplayRandomWord();
    }

    void DisplayRandomWord()
    {
        if (remainingWords.Count == 0)
        {
            FinishGame();
            return;
        }

        int randomIndex = Random.Range(0, remainingWords.Count);
        currentWordData = remainingWords[randomIndex];
        remainingWords.RemoveAt(randomIndex);
        wordDisplay.text = currentWordData.word;

        List<int> indexList = new List<int> { 0, 1, 2 };
        for (int i = 0; i < syllableButtons.Length; i++)
        {
            int randomButtonIndex = indexList[Random.Range(0, indexList.Count)];
            indexList.Remove(randomButtonIndex);
            syllableButtons[i].GetComponentInChildren<Text>().text = currentWordData.syllableOptions[randomButtonIndex];
            int buttonIndex = randomButtonIndex;
            syllableButtons[i].onClick.RemoveAllListeners();
            syllableButtons[i].onClick.AddListener(() => CheckAnswer(buttonIndex));
        }
    }

    void CheckAnswer(int buttonIndex)
    {
        if (firstGuess)
        {
            startTime = Time.time;
            firstGuess = false;
        }

        if (buttonIndex == currentWordData.correctSyllableIndex)
        {
            wordDisplay.text = currentWordData.word.Replace("__", currentWordData.syllableOptions[buttonIndex]);
            // Proceed to next word after a delay
            Invoke(nameof(DisplayRandomWord), 2f);
        }
        else
        {
            // Display incorrect message and allow the user to try again
        }
    }

    void FinishGame()
    {
        float totalTime = Time.time - startTime;
        resultDisplay.text = $"Good job! You completed the game in {totalTime:0.00} seconds.";
        resultDisplay.enabled = true; // Enable resultDisplay when the game is complete
        wordDisplay.gameObject.SetActive(false);

        foreach (Button button in syllableButtons)
        {
            button.gameObject.SetActive(false);
        }
    }
}
